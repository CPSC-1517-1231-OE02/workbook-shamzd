@page "/calculator"

<h3>Calculator</h3>

<fieldset>
	<div class="mb-3">
		<label class="form-label" for="num1">Num1</label>
		<input class="form-control" @bind="Num1" type="text" id="num1"/>
		@*The bind is where the variable from the code is reflected into the fieldset input*@
	</div>
	
	<div class="mb-3">
		<label class="form-label" for="num2">Num2</label>
		<input class="form-control" @bind="Num2" type="text" id="num2" />
		@*The bind is where the variable from the code is reflected into the fieldset input*@
	</div>
	
	<div class="mb-3">
		@*@onclick with the method add is what will link the method to the buttons.
		Only specify it by name Add and not method Add() since it is a void method.*@
		<button type ="button" class="btn btn-primary" @onclick="Add">Num1 + Num2</button>
		<button type="button" class="btn btn-primary" @onclick="Subtract">Num1 - Num2</button>
		<button type="button" class="btn btn-primary" @onclick="Multiply">Num1 * Num2</button>
		<button type="button" class="btn btn-primary" @onclick="Division">Num1 / Num2</button>
	</div>
</fieldset>

@*Since we do not want to display the output div unless there is a value to display we use the if condition*@
@if (!string.IsNullOrWhiteSpace(Output))
{
	<div class="mb-3 fw-bold">
		Calculation Output
	</div>

	<div class="card-body alert @(IsError ? "alert-danger":"alert-info") ">@*To toggle between inof and danger, for error msg.*@
		@*the @ symbol is telling the html to recognize the Output as a variable and not just a string*@
		@Output
	</div>
}





@code {

	private int Num1 { get; set; } = 0;
	private int Num2 { get; set; } = 0;
	private string Output { get; set; } = "";
	private bool IsError { get; set; } = false;

	private void Add()
	{
		IsError = false;
		Output = $"The sum is: {Num1 + Num2}";
	}

	private void Subtract()
	{
		IsError = false;
		Output = $"The subtraction is: {Num1 - Num2}";
	}

	private void Multiply()
	{
		IsError = false;
		Output = $"The multiplication is: {Num1 * Num2}";
	}

	private void Division()
	{
		if(Num2 == 0)
		{
			IsError = true;
			Output = "Num2 cannot be zero for division.";
		}
		else
		{
			@*Division can have decimals as the output even if the variables are ints so we need to type cast it with double and Floating point.*@
			Output = $"The quotient is: {(double)Num1 / Num2:F2}";
			IsError = false;

		}
		
	}

}
